Starting weekly assessment for HongYe, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.57 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp

# Created by https://www.gitignore.io/api/r,linux,python

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

### Python Patch ###
.venv/

### Python.VirtualEnv Stack ###
# Virtualenv
# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/
[Bb]in
[Ii]nclude
[Ll]ib
[Ll]ib64
[Ll]ocal
[Ss]cripts
pyvenv.cfg
pip-selfcheck.json

### R ###
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
/*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html
rsconnect/

### R.Bookdown Stack ###
# R package: bookdown caching files
/*_files/


# End of https://www.gitignore.io/api/r,linux,python


# Created by https://www.gitignore.io/api/latex

### LaTeX ###
## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

## Build tool directories for auxiliary files
# latexrun
latex.out/

## Auxiliary and intermediate files from other packages:
# algorithms
*.alg
*.loa

# achemso
acs-*.bib

# amsthm
*.thm

# beamer
*.nav
*.pre
*.snm
*.vrb

# changes
*.soc

# comment
*.cut

# cprotect
*.cpt

# elsarticle (documentclass of Elsevier journals)
*.spl

# endnotes
*.ent

# fixme
*.lox

# feynmf/feynmp
*.mf
*.mp
*.t[1-9]
*.t[1-9][0-9]
*.tfm

#(r)(e)ledmac/(r)(e)ledpar
*.end
*.?end
*.[1-9]
*.[1-9][0-9]
*.[1-9][0-9][0-9]
*.[1-9]R
*.[1-9][0-9]R
*.[1-9][0-9][0-9]R
*.eledsec[1-9]
*.eledsec[1-9]R
*.eledsec[1-9][0-9]
*.eledsec[1-9][0-9]R
*.eledsec[1-9][0-9][0-9]
*.eledsec[1-9][0-9][0-9]R

# glossaries
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs

# gnuplottex
*-gnuplottex-*

# gregoriotex
*.gaux
*.gtex

# htlatex
*.4ct
*.4tc
*.idv
*.lg
*.trc
*.xref

# hyperref
*.brf

# knitr
*-concordance.tex
# TODO Comment the next line if you want to keep your tikz graphics files
*.tikz
*-tikzDictionary

# listings
*.lol

# makeidx
*.idx
*.ilg
*.ind
*.ist

# minitoc
*.maf
*.mlf
*.mlt
*.mtc[0-9]*
*.slf[0-9]*
*.slt[0-9]*
*.stc[0-9]*

# minted
_minted*
*.pyg

# morewrites
*.mw

# nomencl
*.nlg
*.nlo
*.nls

# pax
*.pax

# pdfpcnotes
*.pdfpc

# sagetex
*.sagetex.sage
*.sagetex.py
*.sagetex.scmd

# scrwfile
*.wrt

# sympy
*.sout
*.sympy
sympy-plots-for-*.tex/

# pdfcomment
*.upa
*.upb

# pythontex
*.pytxcode
pythontex-files-*/

# tcolorbox
*.listing

# thmtools
*.loe

# TikZ & PGF
*.dpth
*.md5
*.auxlock

# todonotes
*.tdo

# easy-todo
*.lod

# xcolor
*.xcp

# xmpincl
*.xmpi

# xindy
*.xdy

# xypic precompiled matrices
*.xyc

# endfloat
*.ttt
*.fff

# Latexian
TSWLatexianTemp*

## Editors:
# WinEdt
*.bak
*.sav

# Texpad
.texpadtmp

# LyX
*.lyx~

# Kile
*.backup

# KBibTeX
*~[0-9]*

# auto folder when using emacs and auctex
./auto/*
*.el

# expex forward references with \gathertags
*-tags.tex

# standalone packages
*.sta

### LaTeX Patch ###
# glossaries
*.glstex


# End of https://www.gitignore.io/api/latex
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
![Logo of the project](https://raw.githubusercontent.com/jehna/readme-best-practices/master/sample-logo.png)

# MY CMEE 2019-2020 COURSEWORK REPOSITORY
> A place to submit my CMEE coursework from week1 to week7.


## Getting started

Hello~ Wellcome to my repository!
At your terminal, please run:
* git clone https://github.com/Grace1016/CMEECourseWork.git


## Introduction

Here's a brief introduction about my repository. There are seven directories named Week1-7 which  contain the codes, datas, sandbox and results from my weekly work. The .gitignore file helps to avoid submitting rubbish files. 


## Content
* Week1(linux and Unix)
* Week2(PythonI)
* ...to be continued



**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: Week1, Week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
![Logo of the project](https://raw.githubusercontent.com/jehna/readme-best-practices/master/sample-logo.png)

# Week1 Coursework
> This directory contains folders of Code, Data, Results and Sandbox.

## Configuration

### Code
* UnixPrac1.txt: contains 5 commands for fasta exercise about the DNA sequence.
* boilerplate.sh: a simple boilerplate for shell scripts.
* ConcatenateTwoFiles.sh: a shell script to concatenate two files.
* CompileLaTeX.sh: a shell script to complie the laTeX and also remove some rubbish files.
* CountLines.sh: a shell script which can count the number of lines of a file.
* csvtospace.sh: a shell script that takes a comma separated values and converts it to a space separated values file. 
* FirstBiblio.bib: add a citation for paper.
* FirstExample.tex: First time to try editing a paper in LaTeX.
* MyExampleScript.sh: a script to say "Hello" to myself.
* tabtocsv.sh: a shell script that substitutes the tabs in the files with commas.
* tiff2png.sh: a shell script to convert tiff to png.
* variables.sh: a shell script to add two variables.


### Data
* fasta: contains 3 files as the imput for UnixPrac1.sh.
* Temperatures: contains 4 .csv files as the imput for csvtospace.sh.
* images.tif: a .tif picture as the imput of tiff2png.sh.
* spawannxs.txt: a file providing data for the test of grep.

### Results
* A folder where some final results will be outputed in.
* Has been cleaned up!

### Sandbox
* Testfile: including some temporary test files which will be deleted after.
* TestFind: including 3 files for the test of finding files.
* TestWild: including 5 .csv files and 5 .txt files for the test of using Wildcards to find files.
* ListRootDir.txt: containing the whole files names in root so that we can usde 'wc -l' to count how many files in root.
* test.txt: created by the test of 'redirection' and then be used to test the scrip 'tabtocsv.sh'.**********************************************************************

Found following files in results directory: images.jpg...

Found 11 code files: CountLines.sh,  ConcatenateTwoFiles.sh, variables.sh, tiff2png.sh, csvtospace.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh, boilerplate.sh

Found the following extra files: CompileLaTeX.sh 
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
var=${1:-../Data/spawannxs.txt} # set a default value if $1 unset
NumLines=`wc -l < $var`
echo "The file $var has $NumLines lines"**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
The file ../Data/spawannxs.txt has 597 lines

**********************************************************************

Code ran without errors

Time consumed = 0.00461s

======================================================================
Inspecting script file  ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
if [ -z "$1"]; then
    echo "variable is not set"
else
    cat $1 > $3
    cat $2 >> $3
    echo "Merged File is"
    cat $3
fi**********************************************************************

Testing  ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
bash: ConcatenateTwoFiles.sh: No such file or directory

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
## Reading multiple values
echo 'Enter two numbers separated by space(s)'
read a b
echo 'you entered' $a 'and' $b '. Their sum is:'
mysum=`expr $a + $b`
echo $mysum**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
Enter two numbers separated by space(s)
you entered and . Their sum is:


**********************************************************************

Encountered error (or warning):
expr: syntax error

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash

for f in ../Data/*.tif; 
    do  
        echo "Converting $f"; 
        convert "$f"  "$(basename "$f" .tif).jpg"; 
    done
mv "$(basename "$f" .tif).jpg" ../Results**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Converting ../Data/images.tif

**********************************************************************

Code ran without errors

Time consumed = 0.01232s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Wang Hongye.  hw2419@ic.ac.uk
# Script: csvtospace.sh
# Desc: shell script that takes a comma separated values and converts it to a space separated values file. However, it must not change the input file 
# Arguments: 1-> tab delimited file
# Date: 1st Oct 2018
if [ -z "$1"]; then
    echo "variable is not set"
else
    echo "creating a space delimited version of $1  "
    cat $1 | tr -s "," " " >> $1.csv
    mv $1.csv ../Results
    echo -e "\nDone!"
    exit
fi**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
variable is not set

**********************************************************************

Code ran without errors

Time consumed = 0.00297s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}
\title{A Simple Document}
\author{Grace}
\date{06/10/2019}
\begin{document}
  \maketitle

  \begin{abstract}
    This paper must be cool!
  \end{abstract}

  \section{Introduction}
    Blah Blah!

  \section{Materials \& Methods}
  One of the most famous equations is:
  \begin{equation}
    E = mc^2
  \end{equation}
  This equation was first proposed by Einstein in 1905 
  \cite{einstein1905does}.

  \bibliographystyle{plain}
  \bibliography{FirstBiblio}
\end{document}**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash

msg1="Hello"
msg2=$USER
echo "$msg1 $msg2"
echo "Hello $USER"
echo**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00239s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content?},
  author={Einstein, A.},
  journal={Annalen der Physik},
  volume={18},
  pages={639--641},
  year={1905}
}**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
# practice for Introduction to UNIX and Linux --Fasta exercise 

#1  Count the number of lines in each file. This command can count lines in every file ended with .fasta.
    command: wc -l ../Data/fasta/*.fasta 
     
#2  Print everything starting from the second line for the E.coli genome.
    command: tail -n +2 ../Data/fasta/E.coli.fasta 

#3  Count the sequence length of the E.coli genome. The length means the number of nucleobases in a single DNA chain. 
    command: tail -n +2 ../Data/fasta/E.coli.fasta | tr -d "\n" | wc -c
    
#4  Count the matches of a particular sequence, "ATGC" in the genome of E. coli.
    command: tail -n +2 ../Data/fasta/E.coli.fasta | tr -d "\n" > ../Results/E.coil.txt && grep -o -i ATGC ../Results/E.coil.txt | wc -l
    
#5  Compute the AT/GC ratio. 
    command:  echo "scale=3;($(grep -o 'A\|T' ../Data/fasta/E.coli.fasta | wc -l)/$(grep -o 'G\|C' ../Data/fasta/E.coli.fasta | wc -l))" |bc
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Wang Hongye hw2419@ic.ac.uk
# Script: tabtocsv.sh
# Desc: substitute the tabs in the files with commas
# Arguments: 1-> tab delimited file
# Date: Oct 2019
var=${1:-../SandBox/test.txt} # set a default value if $1 unset
echo "Creating a comma delimited version of $var ..."
cat $var | tr -s "\t" "," >> $var.csv
mv $var.csv ../Results
echo -e "\nDone!"
exit**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a comma delimited version of ../SandBox/test.txt ...

Done!

**********************************************************************

Encountered error (or warning):
tabtocsv.sh: line 9: ../SandBox/test.txt.csv: No such file or directory
cat: ../SandBox/test.txt: No such file or directory
mv: cannot stat '../SandBox/test.txt.csv': No such file or directory

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Wang Hongye hw2419@ic.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: 1st Oct 2018
echo -e "\nThis is a shell script! \n"
#exit


**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00929s

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!