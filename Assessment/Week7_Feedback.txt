Starting weekly assessment for HongYe, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 14.61 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week5, Week2, Main_Project, .git, Week3, mini_project

Found the following files in parent directory: .gitignore, README.md, .DS_Store

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp



# Created by https://www.gitignore.io/api/r,linux,python

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

### Python Patch ###
.venv/

### Python.VirtualEnv Stack ###
# Virtualenv
# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/
[Bb]in
[Ii]nclude
[Ll]ib
[Ll]ib64
[Ll]ocal
[Ss]cripts
pyvenv.cfg
pip-selfcheck.json

### R ###
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
/*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html
rsconnect/

### R.Bookdown Stack ###
# R package: bookdown caching files
/*_files/


# End of https://www.gitignore.io/api/r,linux,python


# Created by https://www.gitignore.io/api/latex

### LaTeX ###
## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

## Build tool directories for auxiliary files
# latexrun
latex.out/

## Auxiliary and intermediate files from other packages:
# algorithms
*.alg
*.loa

# achemso
acs-*.bib

# amsthm
*.thm

# beamer
*.nav
*.pre
*.snm
*.vrb

# changes
*.soc

# comment
*.cut

# cprotect
*.cpt

# elsarticle (documentclass of Elsevier journals)
*.spl

# endnotes
*.ent

# fixme
*.lox

# feynmf/feynmp
*.mf
*.mp
*.t[1-9]
*.t[1-9][0-9]
*.tfm

#(r)(e)ledmac/(r)(e)ledpar
*.end
*.?end
*.[1-9]
*.[1-9][0-9]
*.[1-9][0-9][0-9]
*.[1-9]R
*.[1-9][0-9]R
*.[1-9][0-9][0-9]R
*.eledsec[1-9]
*.eledsec[1-9]R
*.eledsec[1-9][0-9]
*.eledsec[1-9][0-9]R
*.eledsec[1-9][0-9][0-9]
*.eledsec[1-9][0-9][0-9]R

# glossaries
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs

# gnuplottex
*-gnuplottex-*

# gregoriotex
*.gaux
*.gtex

# htlatex
*.4ct
*.4tc
*.idv
*.lg
*.trc
*.xref

# hyperref
*.brf

# knitr
*-concordance.tex
# TODO Comment the next line if you want to keep your tikz graphics files
*.tikz
*-tikzDictionary

# listings
*.lol

# makeidx
*.idx
*.ilg
*.ind
*.ist

# minitoc
*.maf
*.mlf
*.mlt
*.mtc[0-9]*
*.slf[0-9]*
*.slt[0-9]*
*.stc[0-9]*

# minted
_minted*
*.pyg

# morewrites
*.mw

# nomencl
*.nlg
*.nlo
*.nls

# pax
*.pax

# pdfpcnotes
*.pdfpc

# sagetex
*.sagetex.sage
*.sagetex.py
*.sagetex.scmd

# scrwfile
*.wrt

# sympy
*.sout
*.sympy
sympy-plots-for-*.tex/

# pdfcomment
*.upa
*.upb

# pythontex
*.pytxcode
pythontex-files-*/

# tcolorbox
*.listing

# thmtools
*.loe

# TikZ & PGF
*.dpth
*.md5
*.auxlock

# todonotes
*.tdo

# easy-todo
*.lod

# xcolor
*.xcp

# xmpincl
*.xmpi

# xindy
*.xdy

# xypic precompiled matrices
*.xyc

# endfloat
*.ttt
*.fff

# Latexian
TSWLatexianTemp*

## Editors:
# WinEdt
*.bak
*.sav

# Texpad
.texpadtmp

# LyX
*.lyx~

# Kile
*.backup

# KBibTeX
*~[0-9]*

# auto folder when using emacs and auctex
./auto/*
*.el

# expex forward references with \gathertags
*-tags.tex

# standalone packages
*.sta

### LaTeX Patch ###
# glossaries
*.glstex


# End of https://www.gitignore.io/api/latex
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
![Logo of the project](https://raw.githubusercontent.com/jehna/readme-best-practices/master/sample-logo.png)

# MY CMEE 2019-2020 COURSEWORK REPOSITORY
> A place to submit my CMEE coursework from week1 to week7.


## Getting started

Hello~ Wellcome to my repository!
At your terminal, please run:
* git clone https://github.com/Grace1016/CMEECourseWork.git


## Introduction

Here's a brief introduction about my repository. There are seven directories named Week1-7 which  contain the codes, datas, sandbox and results from my weekly work. The .gitignore file helps to avoid submitting rubbish files. 


## Content
* Week1(linux and Unix)
    * basic unix/linux command learning
    * how to write shell script, latex
* Week2(PythonI)
    * basic input and output, csv file
    * Control flow, list comprehension, loops
    * data types
    * assign and manupilate variables
* Week3(R and Data Management)
    * Vectorization
    * set.seed, random numbers
    * debugging
    * write R functuons
    * visualization, ggplot
* Week4-6(Statistics,GIS,Genomics)
* Week7(PythonII,Jupyter)
    * scipy and numpy
    * regular expressions
    * profiling
    * draw networks
    * subprocesses
    * brief introduction about jupyter



**********************************************************************

======================================================================
Looking for the weekly directories...

Found 6 weekly directories: Week1, Week2, Week3, Week5, Week6, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, Data, result

Found the following files: README.md, .DS_Store

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
![Logo of the project](https://raw.githubusercontent.com/jehna/readme-best-practices/master/sample-logo.png)

# Week7 Coursework
> This directory contains folders of code, data, results.

# Language
R 3.6 python3.6

## Code
* blackbird.py : extract Kindoms,Phylums,and Species names from a file by using regex
* DrawFW.py : This is a script to create a food web and visualize it
* fmr.R : Plots log(field metabolic rate) against log(body mass) for the Nagy et al 1999 dataset to a file fmr.pdf. Writes the list of species names to species.csv
* LV1.py,LV2.py :  scripts contained a numerical integration in Python for solving Loka Volterra model and visualize it"
* Nets.R :  This script visualizes the QMEE CDT collaboration network, coloring the the nodes by the type of node
* profileme.py,profileme2.pf : examples of profiling the code
* re4.py : Playing around with extracting email addresses or their subsets.
* regex.py : containing some practices in class about regex 
* run_frm_R.py : a script run frm.R in python
* testR.py,testR.R : a test that run a R script in python 
* timeitme.py : profiling and showing the time how long codes take
* using.os.py : using subprocess package to find every files and dirs in home directory startwith C



## Data
* Containing some data for scripts in code

## Results
* A folder where some final results will be outputed in.
* Has been cleaned up!**********************************************************************

Found following files in results directory: LV3_model2.pdf, TestR.Rout, LV1_model.pdf, fmr_plot.pdf, LV2_model2.pdf, FW_Network.pdf, TestR_errFile.Rout, LV2_model1.pdf, LV3_model1.pdf, QMEENetpy.svg, .DS_Store...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 21 code files: TestR.py, regexs.py, LV3.py, LV model.py, profileme2.py, timeitme.py, blackbirds.py, Nets.py, TestR.R, profileme.py, LV4.py, fmr.R, using_os.py, LV1.py, MyFirstJupyterNB.ipynb, DrawFW.py, re4.py, Nets.R, run_fmr_R.py, run_LV.py, LV2.py

Found the following extra files: .DS_Store
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This is a script to run R in python"""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../result/TestR.Rout 2> ../result/TestR_errFile.Rout",shell=True).wait()
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.16195s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This is a script containing some practices in regex"""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import re
my_string = "a given string"
match = re.search(r'\s',my_string)
print(match)
match.group()
match = re.search(r'\d',my_string)
print(match)
MyStr = 'an example'
match = re.search(r'\w*\s',MyStr)

if match:
    print('found a match:',match.group())
else:
    print('did not find a match')

match = re.search(r'2',"it takes 2 to tango")
match.group()

match = re.search(r'\d',"it takes 2 to tango")
match.group()

match = re.search(r'\d.*',"it takes 2 to tango")
match.group()

match = re.search(r'\s\w*$', 'once upon a time')
match.group()

#Let's switch to a more compact syntax by directly returning
#the matched group (by directly appending .group() to the result).

re.search(r'\w*\s\d.*\d','take 2 grams of H2O').group()
re.search(r'^\w*.*\s', 'once upon a time').group() # 'once upon a'
re.search(r'^\w*.*?\s', 'once upon a time').group()

#To further illustrate greediness in regexes, let's try matching an HTML tag:

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()
re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()
re.search(r'\d*\.?\d*','1432.75+60.22i').group()
re.search(r'[AGTC]+', 'the sequence ATTCGT').group()
re.search(r'\s+[A-Z]\w+\s\w+','The bird-shit frog''s name is Theloderma asper').group()

re.search(r'\d')**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "regexs.py", line 48, in <module>
    re.search(r'\d')
TypeError: search() missing 1 required positional argument: 'string'

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script is a discrete-time version of integrating Lotka Volterra model and visualizing it."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p
import sys

def CR_t(R0,C0,t=0):
    pops = sc.empty((t,2), dtype='float')#INITIATE
    pops[0,0] = R0
    pops[0,1] = C0
    for i in range(1,t): # create population list at given  discrete time
        pops[i,0] = pops[i-1,0] * (1 + r * (1 - pops[i-1,0]/K) - a * pops[i-1,1] )
        pops[i,1] = pops[i-1,1] * (1 - z + e * a * pops[i-1,0])
        if pops[i,0] <= 0 or pops[i,1] <= 0: # make sure there is non-zero populations
            break
    return pops

if len(sys.argv) == 6:
# take arguments from command line
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
# set default value    
    r = 1.
    a = 0.1
    z = 0.5
    e = 0.75
    K = 20

#set length of t (could be every second,minute,hour,day,month or year)
t = 60

# set initial populations
R0 = 10
C0 = 5 
populations = CR_t(R0,C0,t)

print("the final population values is:")
print(populations)



f1 = p.figure()
p.plot(range(t), populations[:,0], 'g-', label='Resource density') # Plot
p.plot(range(t), populations[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
textstr = ''
textstr += 'r='+str(r)+'\n'+'a='+str(a)+'\n'+'z='+str(z)+'\n'+'e='+str(e)+'\n'+'K='+str(K)
p.text(61.5,5,textstr,fontsize=12)
p.title('Consumer-Resource population dynamics')
# p.show()# To display the figure

f1.savefig('../result/LV3_model1.pdf') #Save figure

f2 = p.figure()
p.plot(populations[:,0], populations[:,1], 'r-')
p.grid()
p.yticks([2.5,5,7.5,10,12.5,15,17.5,20,22.5])
p.xticks([10,15,20,25,30,35,40])
p.text(35,17.5,textstr,fontsize=12)
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()

f2.savefig('../result/LV3_model2.pdf')**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.0

Output (only first 500 characters): 

**********************************************************************
the final population values is:
[[ 10.           5.        ]
 [ 10.           6.25      ]
 [  8.75         7.8125    ]
 [  6.8359375    9.03320312]
 [  5.16033173   9.14788246]
 [  4.26860147   8.11439934]
 [  4.16244132   6.65498494]
 [  4.68848832   5.40506629]
 [  5.74372149   4.60315241]
 [  7.19400361   4.28451811]
 [  8.71803895   4.45397196]
 [  9.75287764   5.13922856]
 [  9.73759744   6.32878433]
 [  8.57143928   7.78642871]
 [  6.7953099    8.89878193]
 [  5.23480988   8.98463953]
 [  4
**********************************************************************

Code ran without errors

Time consumed = 1.05146s

======================================================================
Inspecting script file LV model.py...

File contents are:
**********************************************************************
import scipy  as sc
import scipy.integrate as integrate
def dCR_dt(pops, t=0):
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    return sc.array([dRdt, dCdt])

r = 1
a = 0.1
z = 1.5
e = 0.75
t = sc.linspace(0,15,1000)
R0 = 10
C0 = 5
RC0 = sc.array([R0,C0])
pops,infodict = integrate.odeint(dCR_dt,RC0,t,full_output = True)

## plotting
import matplotlib.pylab as p
f1 = p.figure() #open an empty figure object
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot 
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.show()# To display the figure

f1.savefig('../result/LV_model.pdf') #Save figure as a pdf
**********************************************************************

Testing LV model.py...

LV model.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 96.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
python3: can't open file 'LV': [Errno 2] No such file or directory

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script shows how to profile the code."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

def my_squares(iters):
    out = [i **2 for i in range(iters)]
    return out

def my_join(iters,string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_func(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_func(10000000,"MY string")**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************
10000000 MY string

**********************************************************************

Code ran without errors

Time consumed = 4.50281s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This is a script to compare the time using by different ways,that is profiling"""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)


##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

# %timeit(my_join_join(iters, mystring))
# %timeit(my_join(iters, mystring)) 

import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))

start = time.time()
my_join_join(iters,mystring)
print("my_join_join takes %f s to run" % (time.time() - start))

start = time.time()
my_join(iters,mystring)
print("my_join takes %f s to run" % (time.time() - start))
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.02042s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script extract information about some species in a file by using regex."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import re
import numpy as np
# Read the file
f = open('../Data/blackbirds.txt', 'r')
text = f.read()
f.close()

# remove \t\n and put a space in:
text = text.replace('\t',' ')
text = text.replace('\n',' ')

# note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform
# to ASCII:
text = text.encode('ascii', 'ignore').decode() #will not work in python 3

# Now extend this script so that it captures the Kingdom, 
# Phylum and Species name for each species and prints it out to screen neatly.

# Hint: you may want to use re.findall(my_reg, text)...
# Keep in mind that there are multiple ways to skin this cat! 
# Your solution may involve multiple regular expression calls (easier!), or a single one (harder!)
# blackbirds = re.findall(r'(Kin\w+\s+\w+)|(Phy\w+\s+\w+)|(Spe\w+\s+\w+)',text)
# for blackbird in blackbirds:
    # print(blackbird)

Kingdoms = re.findall(r'Kin\w+\s+\w+',text)
Phylums = re.findall(r'Phy\w+\s+\w*',text)
Species = re.findall(r'Spe\w+\s+\w+',text)

a = np.array(Kingdoms)
b = np.array(Phylums)
c = np.array(Species)
blackbirds = np.column_stack((a,b,c))
print(blackbirds)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************
[['Kingdom Animalia' 'Phylum Chordata' 'Species Euphagus']
 ['Kingdom Animalia' 'Phylum Chordata' 'Species Euphagus']
 ['Kingdom Animalia' 'Phylum Chordata' 'Species Turdus']
 ['Kingdom Animalia' 'Phylum Chordata' 'Species Agelaius']]

**********************************************************************

Code ran without errors

Time consumed = 0.11922s

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
# !usr/bin/envs python3
"""This script is to visualizes the QMEE CDT collaboration network"""

__author__ = 'Hongye Wang'
__version__ = '0.0.1'

"""Visualizes the QMEE CDT collaboration network"""

import csv
import networkx as nx
import scipy as sc
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Opens the csv file containing edge & node information.
link = sc.genfromtxt("../data/QMEE_Net_Mat_edges.csv", delimiter=",")
node = sc.genfromtxt("../data/QMEE_Net_Mat_nodes.csv",
                     delimiter=",", dtype=str)

# Removes the location names
links = link[1:, :]
# Extracts the institution names from the node data.
nodes = node[1:, 0]

# Identifies the presence of links between collaborating sites and creates an array of these links
adjacency = sc.argwhere(links > 1.)

# Creates a tuple of connections between sites using the adjacency array.
connect = ()
for i in adjacency:
    connect = connect + ((i[0], i[1]),)

# Creates a list of link weights using the links array.
weights = []
for i in adjacency:
    weights.append((links[i[0], i[1]])/10)


# Creates the variable NodSizs
NodSizs = []
for i in node[1:, 2]:
    NodSizs.append(float(i)*77)

# Label nodes
names = {}
for i in range(len(nodes)):
    names[i] = nodes[i]

# Assign colours for node type
colours = []
for i in node[1:, 1]:
    if i == 'University':
        colours.append('b')
    if i == 'Hosting Partner':
        colours.append('g')
    if i == 'Non-Hosting Partners':
        colours.append('r')


# Drawng the network.
# Plot graph
plt.close('all')
G = nx.Graph()

# Creates a position variable causing the nodes to be arranged in a circle.
pos = nx.circular_layout(range(len(nodes)))

# Draws the network uing the above objects
nx.draw_networkx(G, pos,
                 nodelist=range(len(nodes)),
                 node_color=colours,
                 labels=names,
                 font_size='12',
                 node_size=NodSizs*100,
                 edgelist=connect,
                 width=weights)

# Removes the axes
plt.axis('off')

# Create items for the legend
blue = mpatches.Patch(color='blue', label='University')
green = mpatches.Patch(color='green', label='Hosting Partner')
red = mpatches.Patch(color='red', label='Non-Hosting Partner')

# Plots a legend to indicate the colour coding
plt.legend(handles=[blue, green, red],
           loc=(0, 0.65), fontsize=10, frameon=False)

# Saves the plot.
plt.savefig('../result/QMEENetpy.svg')**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 93.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "Nets.py", line 16, in <module>
    link = sc.genfromtxt("../data/QMEE_Net_Mat_edges.csv", delimiter=",")
  File "/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py", line 1551, in genfromtxt
    fhd = iter(np.lib._datasource.open(fname, 'rb'))
  File "/usr/local/lib/python3.5/dist-packages/numpy/lib/_datasource.py", line 151, in open
    return ds.open(path, mode)
  File "/usr/local/lib/python3.5/dist-packages/numpy/lib/_datasource.py", line 501, in open
    raise IOError("%s not found." % path)
OSError: ../data/QMEE_Net_Mat_edges.csv not found.

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
### for test ###
print("Hello, this is R!")
**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.09545s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script shows how to profile the code."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 91.5

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.87528s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script is a discrete-time version of integrating Lotka Volterra model and visualizing it."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import scipy as sc
import scipy.stats as st
import scipy.integrate as integrate
import matplotlib.pylab as p
import sys

def CR_t(R0,C0,t=0):
    pops = sc.empty((t,2), dtype='float')#INITIATE
    pops[0,0] = R0
    pops[0,1] = C0
    c = st.norm.rvs(0,0.1)
    for i in range(1,t): # create population list at given  discrete time
        pops[i,0] = pops[i-1,0] * (1 + (r + c) * (1 - pops[i-1,0]/K) - a * pops[i-1,1] )
        pops[i,1] = pops[i-1,1] * (1 - z + e * a * pops[i-1,0])
        if pops[i,0] <= 0 or pops[i,1] <= 0: # make sure there is non-zero populations
            break
    return pops

if len(sys.argv) == 6:
# take arguments from command line
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
# set default value    
    r = 1.
    a = 0.1
    z = 0.5
    e = 0.75
    K = 20

#set length of t (could be every second,minute,hour,day,month or year)
t = 60

# set initial populations
R0 = 10
C0 = 5 
populations = CR_t(R0,C0,t)

print("the final population values is:")
print(populations)



f1 = p.figure()
p.plot(range(t), populations[:,0], 'g-', label='Resource density') # Plot
p.plot(range(t), populations[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
textstr = ''
textstr += 'r='+str(r)+'\n'+'a='+str(a)+'\n'+'z='+str(z)+'\n'+'e='+str(e)+'\n'+'K='+str(K)
p.text(61.5,5,textstr,fontsize=12)
p.title('Consumer-Resource population dynamics')
# p.show()# To display the figure

f1.savefig('../result/LV4_model1.pdf') #Save figure

f2 = p.figure()
p.plot(populations[:,0], populations[:,1], 'r-')
p.grid()
p.yticks([2.5,5,7.5,10,12.5,15,17.5,20,22.5])
p.xticks([10,15,20,25,30,35,40])
p.text(35,17.5,textstr,fontsize=12)
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()

f2.savefig('../result/LV4_model2.pdf')**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 91.0

Output (only first 500 characters): 

**********************************************************************
the final population values is:
[[ 10.           5.        ]
 [ 10.08666991   6.25      ]
 [  8.86878903   7.85312652]
 [  6.92559573   9.15014243]
 [  5.19445681   9.32783526]
 [  4.26114581   8.29789544]
 [  4.13669485   6.8008384 ]
 [  4.6613524    5.51039369]
 [  5.72967378   4.68163836]
 [  7.20632847   4.35263872]
 [  8.75934967   4.52881019]
 [  9.80078168   5.2396125 ]
 [  9.75020298   6.47122861]
 [  8.52411963   7.96779874]
 [  6.70814356   9.07778459]
 [  5.15409747   9.10602347]
 [  4
**********************************************************************

Code ran without errors

Time consumed = 0.92906s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../result/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17713s

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This is a script to lists if files and direcyories from home directory"""

__author__ = 'Hongye Wang'

# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []

# Use a for loop to walk through the home directory.
d = 0
f = 0
for (dir, subdir, files) in subprocess.os.walk(home):
    for directory in dir:
        if directory.startswith("C"):
            d = d + 1
            FilesDirsStartingWithC.append(directory)
    for file in files:
        if file.startswith("C"):
            f = f + 1
            FilesDirsStartingWithC.append(file)
print("files and dirs start with 'C': directory number:", d, "; file number:", f, "\n\n", FilesDirsStartingWithC,"\n\n")
            

#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:
a = 0
b = 0
FilesDirsStartingWithc = []
for (dir, subdir, files) in subprocess.os.walk(home):
    for directory in subdir:
        if directory.lower().startswith("c"):
            a = a + 1
            FilesDirsStartingWithc.append(directory)
    for file in files:
        if file.lower().startswith("c"):
            b = b + 1
            FilesDirsStartingWithc.append(file)
print("files and dirs start with 'C' or 'c': directory number:", a, "; file number:", b, "\n\n", FilesDirsStartingWithc,"\n\n")
#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
c = 0
DirsStartingWithc = []
for (dir, subdir, files) in subprocess.os.walk(home):
    for directory in subdir:
        if directory.lower().startswith("c"):
            c = c + 1
            DirsStartingWithc.append(directory)
print("only dirs start with 'C': directory number:", c, "\n\n", DirsStartingWithc)**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 91.0

Output (only first 500 characters): 

**********************************************************************
files and dirs start with 'C': directory number: 88639 ; file number: 14036 

 ['C', 'CHANGELOG.md', 'CONTRIBUTING.md', 'C', 'C', 'C', 'Caligraphic-Bold.js', 'C', 'CombDiacritMarks.js', 'C', 'C', 'C', 'CombDiacritMarks.js', 'CombDiacritMarks.js', 'CombDiactForSymbols.js', 'CombDiacritMarks.js', 'CombDiacritMarks.js', 'CombDiacritMarks.js', 'CombDiacritMarks.js', 'CombDiacritMarks.js', 'CombDiactForSymbols.js', 'CombDiacritMarks.js', 'CHTML-preview.js', 'C', 'CONTRIBUTING.md', 'CHANGELOG.md', 'COP
**********************************************************************

Code ran without errors

Time consumed = 6.32489s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'


import scipy as sc
import scipy.integrate as integrate
def dCR_dt(pops, t=0):
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    return sc.array([dRdt, dCdt])

r = 1
a = 0.1
z = 1.5
e = 0.75
t = sc.linspace(0,15,1000)
R0 = 10
C0 = 5
RC0 = sc.array([R0,C0])
pops,infodict = integrate.odeint(dCR_dt,RC0,t,full_output = True)

##plotting
import matplotlib.pylab as p
f1 =  p.figure()
p.plot(pops[:,0], pops[:,1],  'r-')
p.grid()
p.yticks([2.5,5,7.5,10,12.5,15,17.5,20,22.5])
p.xticks([10,15,20,25,30,35,40])
p.legend(loc  = 'best')
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
p.show()

f1.savefig('../result/LV1_model.pdf')**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 5.55285s

======================================================================
Inspecting script file MyFirstJupyterNB.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = \"this is python!\"; print(a)\n"
   ]
  }
 ],
 "metadata": {
  "file_extension": ".py",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNB.ipynb...

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This is a script to create a food web and plot it"""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'


import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

def GenRdmjList(N = 2, C = 0.5):
    """
    """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:
            Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)
    return ALst

MaxN = 30
C = 0.75

AdjL = sc.array(GenRdmjList(MaxN,C))

Sps = sc.unique(AdjL) # get species ids
SizRan = ([-10,10]) # use log10 scale
Sizs = sc.random.uniform(SizRan[0],SizRan[1],MaxN)

p.hist(Sizs) # log10 scale
p.show()

p.hist(10 ** Sizs)
p.show()
p.close('all') # close all open plot objects

pos = nx.circular_layout(Sps)
G = nx.Graph()
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL)) # this function needs a tuple input
NodSizs = 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs))
nx.draw_networkx(G, pos, node_size = NodSizs)
p.show()
p.close()
p.savefig('../result/FW_Network.pdf')**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file re4.py...

File contents are:
**********************************************************************
"""" 
Playing around with extracting email addresses or their subsets.

From Wikipedia: 
The format of email addresses is local-part@domain 
the local-part may be up to 64 characters 
the domain name may have a maximum of 253 characters

The local-part of the email address may use any of these 
ASCII characters:
- Uppercase and lowercase English letters
- Digits 0 to 9
- Characters !#$%&'*+-/=?^_`{|}~
- Character . provided that it is not the first or last 
  character, and provided also that it does not appear 
  two or more times consecutively

The domain name is formed by letters, digits,
hypens and dots.
"""
import re
valid1 = "niceandsimple@example.com"
valid2 = "very.common@example.com"
validbutterrible = "!#$%&'*+-/=?^_`{}|~@example.org"

invalid1 = "Abc.example.com"
invalid2 = "Abc.@example.com"

#matching the simplest one:
emailpattern1 = r'^[a-zA-Z0-9\._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$'
print(re.search(emailpattern1, valid1).group())

#matching the nasty one:
emailpattern = r'[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-z0-9!\#$%&\'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'
print(re.search(emailpattern, validbutterrible).group())
**********************************************************************

Testing re4.py...

re4.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************
niceandsimple@example.com
!#$%&'*+-/=?^_`{}|~@example.org

**********************************************************************

Code ran without errors

Time consumed = 0.02988s

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
        
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../result/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()
**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""this is a script to run fmr.R"""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import subprocess

p = subprocess.Popen("Rscript fmr.R", stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE, shell=True)

stdout, stderr = p.communicate()

if stderr:
    print("Error!!\n")
    print(stderr.decode())
else:
    print("Successfully call Rscript fmr.R!!\n")

print(stdout.decode())**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************
Successfully call Rscript fmr.R!!

Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.20287s

======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script is to run LV* script and the profile them."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import subprocess
import time

start = time.time()
subprocess.os.system("python3 LV1.py")
print("LV1.py takes %f s to run" % (time.time() - start))

start = time.time()
subprocess.os.system("python3 LV2.py 1.0 0.5 1.5 0.75 40")
print("LV2.py takes %f s to run" % (time.time() - start))

start = time.time()
subprocess.os.system("python3 LV3.py 1.0 0.1 0.5 0.75 20")
print("LV3.py takes %f s to run" % (time.time() - start))

start = time.time()
subprocess.os.system("python3 LV4.py 1.0 0.1 0.5 0.75 20")
print("LV4.py takes %f s to run" % (time.time() - start))**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************
[[ 10.           5.        ]
 [  9.73499071   5.16795796]
 [  9.46609117   5.33353277]
 ..., 
 [  1.93876131   1.08975662]
 [  1.95072311   1.07721808]
 [  1.96293298   1.06489628]]
the final population values is:
[[ 10.           5.        ]
 [ 10.           6.25      ]
 [  8.75         7.8125    ]
 [  6.8359375    9.03320312]
 [  5.16033173   9.14788246]
 [  4.26860147   8.11439934]
 [  4.16244132   6.65498494]
 [  4.68848832   5.40506629]
 [  5.74372149   4.60315241]
 [  7.19400361   4.2845181
**********************************************************************

Code ran without errors

Time consumed = 5.61037s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""This script is a improvement of LV1 which is integrating Lotka Volterra model and visualizing it."""

__author__ = 'Hongye Wang (hw2419@ic.ac.uk)'

import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p
import sys

def dCR_dt(pops, t=0):
    """define the model"""
    R = pops[0]
    C = pops[1]
    dRdt = r * R * (1 - R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])
type(dCR_dt)


if len(sys.argv) == 6:
# take arguments from command line
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
# set default value    
    r = 1.
    a = 0.5
    z = 1.5
    e = 0.75
    K = 40

t = sc.linspace(0, 15,  1000)

R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])


pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
print(pops)
type(infodict)
infodict.keys()
infodict['message']

f1 = p.figure()
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
textstr = ''
textstr += 'r='+str(r)+'\n'+'a='+str(a)+'\n'+'z='+str(z)+'\n'+'e='+str(e)+'\n'+'K='+str(K)
p.text(16.5,5,textstr,fontsize=12)
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure

f1.savefig('../result/LV2_model1.pdf') #Save figure

f2 = p.figure()
p.plot(pops[:,0], pops[:,1], 'r-')
p.grid()
p.yticks([2.5,5,7.5,10,12.5,15,17.5,20,22.5])
p.xticks([10,15,20,25,30,35,40])
p.text(35,17.5,textstr,fontsize=12)
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
#p.show()

f2.savefig('../result/LV2_model2.pdf')**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************
[[ 10.           5.        ]
 [  9.73499071   5.16795796]
 [  9.46609117   5.33353277]
 ..., 
 [  1.93876131   1.08975662]
 [  1.95072311   1.07721808]
 [  1.96293298   1.06489628]]

**********************************************************************

Code ran without errors

Time consumed = 0.84323s

======================================================================
======================================================================
Finished running scripts

Ran into 5 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 88.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!